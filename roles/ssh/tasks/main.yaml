- import_tasks: pre.yaml

# Ensure ~/.ssh exists
- name: Ensure ~/.ssh directory exists
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/.ssh"
    state: directory
    mode: '0700'

# --------------------------------------------------------------------
# 1. Write private and public SSH keys from vault
# --------------------------------------------------------------------
- name: Write private SSH keys
  ansible.builtin.copy:
    content: "{{ item.private }}"
    dest: "{{ ansible_env.HOME }}/.ssh/{{ item.name }}"
    mode: '0600'
  loop: "{{ ssh_keys }}"
  no_log: true

- name: Write public SSH keys (if provided)
  ansible.builtin.copy:
    content: "{{ item.public }}"
    dest: "{{ ansible_env.HOME }}/.ssh/{{ item.name }}.pub"
    mode: '0644'
  loop: "{{ ssh_keys }}"
  when: item.public is defined
  no_log: true

# --------------------------------------------------------------------
# 2. Preload host fingerprints so we never get an authenticity prompt
# --------------------------------------------------------------------
- name: Add SSH host key for each host
  ansible.builtin.known_hosts:
    name: "{{ ('[' ~ host_entry.name ~ ']:' ~ host_entry.port) if ('port' in host_entry) else host_entry.name }}"
    key: "{{ lookup('pipe', 'ssh-keyscan -t rsa,ecdsa,ed25519 ' ~ ((' -p ' ~ host_entry.port ~ ' ') if ('port' in host_entry) else '') ~ host_entry.name) }}"
    path: "{{ ansible_env.HOME }}/.ssh/known_hosts"
    hash_host: false
    state: present
  loop: "{{ lookup('subelements', ssh_keys, 'hosts') }}"
  loop_control:
    loop_var: pair
  vars:
    key_entry: "{{ pair.0 }}"
    host_entry: "{{ pair.1 }}"
  no_log: true

# --------------------------------------------------------------------
# 3. Build ~/.ssh/config
# --------------------------------------------------------------------
- name: Add SSH config entries for each key/host pair
  ansible.builtin.blockinfile:
    path: "{{ ansible_env.HOME }}/.ssh/config"
    create: true
    mode: '0600'
    marker: "# {mark} ANSIBLE MANAGED {{ host_entry.name }} ({{ key_entry.name }})"
    block: |
      Host {{ host_entry.name }}
        HostName {{ host_entry.name }}
        {% if host_entry.port is defined %}Port {{ host_entry.port }}{% endif %}
        User {{ host_entry.user | default('git') }}
        IdentityFile ~/.ssh/{{ key_entry.name }}
        {{ host_entry.extra | default('') | indent(8, false) }}
  loop: "{{ lookup('subelements', ssh_keys, 'hosts') }}"
  loop_control:
    loop_var: pair
  vars:
    key_entry: "{{ pair.0 }}"
    host_entry: "{{ pair.1 }}"
  no_log: true

# --------------------------------------------------------------------
# 4. (Optional) Add passphrase-protected keys to ssh-agent
# --------------------------------------------------------------------
- name: Create temporary SSH_ASKPASS helper for passphrase keys
  ansible.builtin.copy:
    dest: "{{ ansible_env.HOME }}/.ssh/.askpass_{{ item.name }}"
    mode: '0700'
    content: |
      #!/usr/bin/env bash
      echo "{{ item.passphrase }}"
  loop: "{{ ssh_keys }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - item.passphrase is defined
    - ansible_env.SSH_AUTH_SOCK is defined
  no_log: true

- name: Add key to running ssh-agent using SSH_ASKPASS
  ansible.builtin.shell: >
    setsid -w env SSH_ASKPASS="{{ ansible_env.HOME }}/.ssh/.askpass_{{ item.name }}" SSH_ASKPASS_REQUIRE=force DISPLAY=:0
    ssh-add "{{ ansible_env.HOME }}/.ssh/{{ item.name }}" < /dev/null
  args:
    executable: /bin/bash
  loop: "{{ ssh_keys }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - item.passphrase is defined
    - ansible_env.SSH_AUTH_SOCK is defined
  changed_when: false
  no_log: true

- name: Remove temporary SSH_ASKPASS helper scripts
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/.ssh/.askpass_{{ item.name }}"
    state: absent
  loop: "{{ ssh_keys }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - item.passphrase is defined
    - ansible_env.SSH_AUTH_SOCK is defined
  no_log: true
